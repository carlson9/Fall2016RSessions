batch_ids <- vector()
for(i in 1:num_batches){
args <- paste("hit_setting_id=", task_setting_id, '&email=', email, '&auth_token=', auth_token, sep="")
myget <- POST(paste('https://www.sentimentit.com/api/batches.json?',
args, sep=''))
batch_ids[i] <- fromJSON(rawToChar(as.raw(myget$content)))$id
}
batch_id <- unique(batch_id)
batch_id <- batch_id[sort.list(batch_id)]
for(i in batch_id){
myput<-PUT('https://www.sentimentit.com/api/batches/',i,'/repost_expired.json',
body = args, content_type_json(),
encode='json')
}
i
myput<-PUT('https://www.sentimentit.com/api/batches/',i,'/repost_expired.json',
body = args, #content_type_json(),
encode='json')
?is.request
?request
for(i in batch_id){
myput<-PUT('https://www.sentimentit.com/api/batches/',i,'/repost_expired',
body = args, #content_type_json(),
encode='json')
}
arfs
args
i <- 369
myput<-PUT('https://www.sentimentit.com/api/batches/',i,'/repost_expired',
body = args, #content_type_json(),
encode='json')
myput<-PUT('https://www.sentimentit.com/api/batches/',i,'/repost_expired.json',
body = args, #content_type_json(),
encode='json')
myput<-PUT(paste0('https://www.sentimentit.com/api/batches/',i,'/repost_expired'),
body = args, #content_type_json(),
encode='json')
myput
fromJSON(rawToChar(as.raw(t$content)))
fromJSON(rawToChar(as.raw(myput$content)))
fromJSON(rawToChar(as.raw(myput)))
rawToChar(as.raw(myput$content))
rawToChar(as.raw(myput$statud))
rawToChar(as.raw(myput$status))
(myput$status)
myput<-PUT(paste0('https://www.sentimentit.com/api/batches/',i,'/repost_expired.json'),
body = args, #content_type_json(),
encode='json')
myput
myput<-PUT(paste0('https://www.sentimentit.com/api/batches/',i,'/repost_expired.json'),
body = args, content_type_json(),
encode='json')
myput
myput<-PUT(paste0('https://www.sentimentit.com/api/batches/',i,'/repost_expired'),
body = args, content_type_json(),
encode='json')
myput
args
batch_id
batch_id <- 238
auth_token <- authenticate(email, password)
# Put the batch_id in numerical order and remove duplicates
batch_id <- unique(batch_id)
batch_id <- batch_id[sort.list(batch_id)]
output<-data.frame()
for(i in batch_id){
myurl<- GET(paste0('https://www.sentimentit.com/api/batches/',i,'/download.json?email=', email, '&auth_token=', auth_token))
myurl <- rawToChar(as.raw(myurl$content))
myurl <- strsplit(myurl,'\"')[[1]][4]
x <- getURL(myurl)
# attempt to connect to server until data is downloaded
try_count <- 0
while(nchar(x) < 1000 & try_count < 50){
Sys.sleep(20)
x <- getURL(myurl)
try_count = try_count + 1
}
if(nchar(x) < 1000 & try_count == 50){
message <- paste("Failed to download batch", i,
"try again later and check that the batch number exists.")
warning(message)
}else{
hold <- as.data.frame(read.csv(text = x), stringsAsFactors = FALSE)
for(k in 1:ncol(hold)){
if(is.factor(hold[,k])) hold[,k] <- as.character(hold[,k])
}
output <- rbind(output,hold)
}
}
x
1/3*50
1/3*20
1/3*10
1/3*15
nchar(x)
library(weightTAPSPACK)
?"weightTAPSPACK"
library('plyr')
library('jsonlite')
library('httr')
library('RCurl')
library('rstan')
?DELETE
email <- 'carlson.david@wustl.edu'
password <- 'SentimentIt'
args <- list(email = email, password = password)
args <- toJSON(args, auto_unbox=TRUE)
auth_token <- authenticate(email, password)
auth_token
authenticate
authenticate <- function(email, password){
args <- list(email = email, password = password)
args <- toJSON(args, auto_unbox=TRUE)
mypost <- POST('https://www.sentimentit.com/api/sessions.json',
body = args, content_type_json(),
encode='json')
out <- fromJSON(rawToChar(as.raw(mypost$content)))
if(!out$success){
email <- readline('Invalid email or password. Re-enter email: ')
password <- readline('Re-enter password: ')
return(authenticate(email, password))
}
return(out$auth_token)
}
authenticate('carlson.david@wustl.edu', 'SentimentIt')
auth_token <- authenticate(email, password)
auth_token
args <- list(email = email, auth_token = auth_token)
args <- toJSON(args, auto_unbox=TRUE)
mydelete <- DELETE('https://www.sentimentit.com/api/sessions/sign_out.json',
body = args, content_type_json(),
encode='json')
fromJSON(rawToChar(as.raw(mydelete$content)))
auth_token
mydelete <- DELETE(paste0('https://www.sentimentit.com/api/sessions/sign_out.json?email=', email, '&auth_token=',
auth_token), content_type_json(),
encode='json')
fromJSON(rawToChar(as.raw(mydelete$content)))
x<-NULL
is.vector(x)
x<-2
is.vector(x)
x<-NULL
length(x)
x<-2
length(x)
x[1]
x[2]
rm(list=ls()) #remember, this is good to put at the beginning of any code
setwd('~/Fall2016RSessions/Session2') #also good to put right at the top of the code
my_sum_squares <- function( x, y ){
z <- sum(x^2,y^2)
return(z)
}
my_sum_squares(2,4)
my_sum_squares(1:10, 2:11)
my_sum_squares <- function( x, y ){
return(x^2+y^2)
}
my_sum_squares(1:10, 2:11)
my_sum_squares <- function( x, y ){
z <- sum(x^2,y^2)
return(z)
}
my_sum_squares <- function( x, y=1 ){
z <- sum(x^2,y^2)
return(z)
}
my_sum_squares(1:10)
my_sum_squares <- function( x, y){
z <- sum(x^2,y^2)
return(z)
}
plot_my_sum_squares <- function( x, y ){
# arguments are the variables used by the function
# they can have defaults, or no defaults.
# you can have a function with no arguments
# variables created within the function don't exist outside it.
#the code within, however, can find variables from your global environment
#(this is generally bad practice, with the very notable exception of functions).
z <- my_sum_squares(x,y)
Dave <- 'Hello'
output <- list(z, Dave) #lists allow combining any types of elements ?list - these are very useful
# you can't alter variables in the global environment within the funciton
#any plot functions in a function will be executed. more on plotting below
plot(x,y, type = "o")
#return is what the function gives back. It must be ONE object.
return(output)
}
my_sum_squares(1:10, 2:11)
plot_my_sum_squares <- function( x, y ){
# arguments are the variables used by the function
# they can have defaults, or no defaults.
# you can have a function with no arguments
# variables created within the function don't exist outside it.
#the code within, however, can find variables from your global environment
#(this is generally bad practice, with the very notable exception of functions).
z <- my_sum_squares(x,y)
Dave <- 'Hello'
output <- list(z, Dave) #lists allow combining any types of elements ?list - these are very useful
# you can't alter variables in the global environment within the funciton
#any plot functions in a function will be executed. more on plotting below
plot(1:10,1:10, type = "o")
#return is what the function gives back. It must be ONE object.
return(output)
}
my_sum_squares(1:10, 2:11)
plot_my_sum_squares <- function( x, y ){
# arguments are the variables used by the function
# they can have defaults, or no defaults.
# you can have a function with no arguments
# variables created within the function don't exist outside it.
#the code within, however, can find variables from your global environment
#(this is generally bad practice, with the very notable exception of functions).
z <- my_sum_squares(x,y)
Dave <- 'Hello'
output <- list(z, Dave) #lists allow combining any types of elements ?list - these are very useful
# you can't alter variables in the global environment within the funciton
#any plot functions in a function will be executed. more on plotting below
plot(x,y, type = "o")
#return is what the function gives back. It must be ONE object.
return(output)
}
plot_my_sum_squares(1:10, 2:11)
x<-'Dave
}
'
x
addPowers <- function(x,y,power=2){
z<-x^power+y^power
return(z)
}
addPowers(4,5,4)
addPowers(x=4,y=5,power=4)
addPowers(x=4,y=5)
addPowers(y=4,x=5)
addPowers(power=5,y=4,x=5)
addPowers(power=5,y=4,x=5)
x<-addPowers(power=5,y=4,x=5)
x
5*6
addPowers <- function(x,y,power=2) x^power+y^power
addPowers(2,3)
addPowers(2,3,6)
?segments
x<-1:10
y<-10:20
y<-11:20
x*y
dotProduct <- function(x,y){
return(sum(x*y))
}
dotProduct(x,y)
x%*%y
sqrRt <- function(x) x^(.5)
sqrRt(1)
sqrRt(1:1000)
as.list(sqrRt(1:1000))
?lapply
lapply(1:1000,sqrRt)
1:1000
factorial(9)
fib <- function(n){
if(n==1) return(1)
if(n==2) return(1)
return(fib(n-1)+fib(n-2))
}
fib(5)
fib(6)
fib(15)
?plot
plot(1:10, seq(1,20,by=2))
plot(1:10, seq(1,20))
plot(1:10, seq(1,20,by=2),type='b')
plot(1:10, seq(1,20,by=2),type='l')
plot(1:10, seq(1,20,by=2),type='b',pch=18)
plot(1:10, seq(1,20,by=2),type='b',pch=20)
plot(1:10, (1:10)^2,type='b',pch=18,
main='My First Plot', xlab='x', ylab=expression(x^2))
plot(1:10, (1:10)^2,type='b',pch=18,
main='My First Plot', xlab='x', ylab=expression(x[2]))
x<-1:10
y<-x^2
plot(x, y,type='b',pch=18, main='My First Plot', xlab='x', ylab=expression(x^2))
plot(x ~ y,type='b',pch=18, main='My First Plot', xlab='x', ylab=expression(x^2))
?abline
plot(x, y,type='b',pch=18, main='My First Plot', xlab='x', ylab=expression(x^2))
abline(v=6)
abline(h=6^2)
'
'
'
}
)
"
'
abline(-36,12)
plot(x, y,type='b',pch=18, main='My First Plot', xlab='x', ylab=expression(x^2))
#draw a segment connecting the x axis to the plot at x=6
?segments
segments(6,0,6,36)
segments(0,36,6,36)
pdf('MyFirstPlot.pdf')
plot(x, y,type='b',pch=18, main='My First Plot', xlab='x', ylab=expression(x^2))
#draw a segment connecting the x axis to the plot at x=6
segments(6,0,6,36)
#draw a segment connecting to y axis
segments(0,36,6,36)
dev.off()
library(foreign)
nfl <- read.dta("nfl_playerdata.dta")
nfl$firstyear >= 2000
nfl2 <- nfl[nfl$firstyear >= 2000, ]
hist(nfl2$weight, main = "NFL Player Weight",xlab = "Weight (lbs.)")
hist(nfl2$weight, main = "NFL Player Weight", xlab = "Weight (lbs.)", breaks = "SCOTT")
hist(nfl2$weight, main = "NFL Player Weight", xlab = "Weight (lbs.)", breaks = "FD")
hist(nfl2$weight, main = "NFL Player Weight", xlab = "Weight (lbs.)", breaks = 100)
hist(nfl2$weight, main = "NFL Player Weight", xlab = "Weight (lbs.)", breaks = 100, probability = TRUE)
hist(nfl2$weight[nfl2$firstyear == 2000],
main = "NFL Player Weight",
xlab = "Weight (lbs.)", col = 'red', probability = T, ylim = c(0, .014))
hist(nfl2$weight[nfl2$firstyear == 2010],
main = "NFL Player Weight",
xlab = "Weight (lbs.)",
add = TRUE, col = 'blue', probability = TRUE)
boxplot(nfl2$weight, xlab = "all players")
boxplot(nfl2$weight ~ nfl2$firstyear,
main = "NFL Player Weight",
ylab = "Weight (lbs.)",
horizontal = TRUE)
plot(nfl$weight ~ nfl$firstyear)
plot(nfl$firstyear, nfl$weight)
plot( x = nfl$firstyear, y = nfl$weight,
xlab = "Year",
ylab = "Weight (lbs.)",
main = "NFL Player Weight by Year",
ylim = c(200,300),
xlim = c(1960,2011)
)
year_means <- sapply(1960:2011, function(year) mean(nfl$weight[nfl$firstyear == year]))
years <- 1960:2011
plot(x = years, y = year_means)
plot(x = years, y = year_means, type = "l") #lines
plot(x = years, y = year_means, type = "b") #both
plot(x = years, y = year_means, type = "o") #both, no gaps (overplotted)
plot(x = years, y = year_means, type = "n") #Nothing
plot(x = years, y = year_means, type = "h") #Fake histogram situation
plot(x = years, y = year_means, type = "s") #stair steps
plot(x = years, y = year_means, type = "n", xlab = "Year", ylab = "Weight (lbs.)", main = "Some Weights") #Nothing
lines(x = 1960:2011, y = year_means, col = "red")
lines(x = 1960:2011, y = year_means-10, col = "red", lty = 2)
lines(x = 1960:2011, y = year_means+10, col = "red", lty = 3)
lines(x = 1960:2011, y = year_means+5, col = "red", lty = 4)
lines(x = 1960:2011, y = year_means-5, col = "red", lty = 5)
lines(x = 1960:2011, y = year_means+5, col = "red", lty = 4)
lines(x = 1960:2011, y = year_means-5, col = "red", lty = 5)
#We can do the same with points; use pch to change
plot(x = years, y = year_means,
type = "n",
xlab = "Year",
ylab = "Weight (lbs.)",
main = "Some Weights") #Nothing
points(x = 1960:2011, y = year_means, col = "red")
points(x = 1960:2011, y = year_means + 5, col = "red", pch = 20) #20 is my personal preference.
points(x = 1960:2011, y = year_means - 5, col = "red", pch = "+")
#More complicated: draw line segments.  To do this, you must give starting x and y, and finishing x and y
plot(x = years, y = year_means,
type = "n",
xlab = "Year",
ylab = "Weight (lbs.)",
main = "Some Weights") #Nothing
segments( x0 = 1970, #starting x
y0 = 220, #starting y
x1 = 1975, #finishing x
y1 = 225, #finishing y
col = "red")
segments( x0 = 1960:2005, #starting x
y0 = seq(from = 220, to = 235, length = 46),  #starting y
x1 = 1965:2010, #finishing x
y1 = seq(from = 225, to = 240, length = 46), #finishing y
col = "peru")
# arrows, curve, and polygon exist as well.
density(nfl2$weight) #not particularly helpful
nfl_dens <- density(nfl2$weight)
str(nfl_dens) #what's going on here?
plot(nfl_dens,
xlab = "Weight (lbs.)",
main = "Density of player weights, 2000-2011")
lines(density(nfl$weight), col = "blue")
plot(nfl_dens,
xlab = "Weight (lbs.)",
main = "Density of player weights, 2000-2011",
ylim = c(0, 0.015))
lines(density(nfl$weight), col = "blue") #rise of the 300 pound player...
legend("topright",
legend = c("2000-2011", "All Years"),
lty = c(1,1),
col = c("black", "blue"),
bty = "n"
)
rug(nfl$weight, col = "blue")
rug(nfl2$weight, col = "black")
plot(x = years, y = year_means, type = "n", xlab = "Year", ylab = "Weight (lbs.)", main = "Some Weights") #Nothing
lines(x = 1960:2011, y = year_means, col = "red", lwd = 1)
lines(x = 1960:2011, y = year_means+5, col = "red", lwd = 2)
lines(x = 1960:2011, y = year_means+10, col = "red", lwd = 3)
plot(x = years, y = year_means,
type = "n",
xlab = "Year",
ylab = "Weight (lbs.)",
main = "Some Weights") #Nothing
points(x = 1960:2011, y = year_means, col = "red")
points(x = 1960:2011, y = year_means + 5, col = "blue", cex = 1.5)
points(x = 1960:2011, y = year_means - 5, col = "green", cex = 2)
plot(x = years, y = year_means,
type = "n",
xlab = "Year",
ylab = "Weight (lbs.)",
main = "Some Weights",
bty = "n") #Nothing
#4. xaxt, yaxt = axis control
plot(x = years, y = year_means,
type = "n",
xlab = "Year",
ylab = "Weight (lbs.)",
main = "Some Weights",
bty = "n",
xaxt = "n",
yaxt = "n") #Nothing
axis(side = 1 # 1 = bottom, 2 = left, 3 = top, 4 = right
)
axis(side = 2, at = c(220, 230, 240), labels = c("Two-Twenty", "Two-Thirty", "Two-Forty"))
colors() #try googling "colors in R"
plot(x = years, y = year_means,
type = "n",
xlab = "Year",
ylab = "Weight (lbs.)",
main = "Some Weights",
ylim = c(208, 251)) #Nothing
points(x = 1960:2011, y = year_means, col = sample(colors(), 1), pch = 20)
points(x = 1960:2011, y = year_means + 5, col = sample(colors(), 2), pch = 20)
points(x = 1960:2011, y = year_means - 5, col = sample(colors(), 52), pch = 20)
b <- rgb( 0,0,1, alpha = .1)
r <- rgb( 1,0,0, alpha = .1)
#6. Change axis text direction: las = 1
plot(x = years, y = year_means,
type = "o",
xlab = "Year",
ylab = "Weight (lbs.)",
main = "Some Weights",
ylim = c(208, 251),
las = 1) #Nothing
plot( x = nfl$firstyear, y = nfl$weight,
xlab = "Year",
ylab = "Weight (lbs.)",
main = "NFL Player Weight by Year",
pch = "."
)
abline (h = 250, col = "red")
abline (v = 1960, col = "red")
abline (a = -3000, b = 1, col = "blue")
abline (lm( nfl$weight ~ nfl$firstyear), col = "orange", lwd = 3)
opar <- par(mfrow = c(1, 2))
hist(nfl$weight)
hist(nfl2$weight)
par(opar)
opar <- par(mar = c(0,0,0,0))
plot(x = years, y = year_means,
type = "n",
xlab = "Year",
ylab = "Weight (lbs.)",
main = "Some Weights",
ylim = c(208, 251)) #Nothing
points(x = 1960:2011, y = year_means, col = sample(colors(), 1), pch = 20)
par(opar)
early <- nfl$weight[nfl$firstyear %in% c(1930:1950)]
late <- nfl$weight[nfl$firstyear %in% c(1990:2010)]
r <- rgb(0,1,0, alpha = .4)
b <- rgb(1,0,1, alpha = .4)
hist(early, probability = T, col = b, xlim = c(120, 400), xlab = "Player Weight", main = "NFL Player Weight in 2 Eras", breaks = seq(from = 120, to = 410, by = 10))
hist(late, probability = T, add = T, col = r, breaks = seq(from = 120, to = 410, by = 10))
lines(density(early), col = b, lwd = 3, lty = 2)
lines(density(late), col = r, lwd = 3, lty = 4)
rug(early, col = b)
rug(late, col = r)
legend("topright", legend = c("1930-1950", "1990-2010"), col = c(b,r), bty = "n", pch = 15)
plot(x = years, y = year_means,
type = "n",
xlab = "Year",
ylab = "Weight (lbs.)",
main = "Some Weights") #Nothing
points(x = 1960:2011, y = year_means, col = "red")
points(x = 1960:2011, y = year_means + 5, col = "blue", cex = 1.5)
points(x = 1960:2011, y = year_means - 5, col = "green", cex = 2)
plot(x = years, y = year_means,
type = "n",
xlab = "Year",
ylab = "Weight (lbs.)",
main = "Some Weights",
bty = "n") #Nothing
opar <- par(mfrow = c(1, 2))
hist(nfl$weight)
hist(nfl2$weight)
par(opar)
opar <- par(mfrow = c(1, 1))
hist(nfl$weight)
hist(nfl2$weight)
par(opar)
opar <- par(mfrow = c(1, 2))
hist(nfl$weight)
hist(nfl2$weight)
par(opar)
