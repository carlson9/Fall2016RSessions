batch_ids <- vector()
for(i in 1:num_batches){
args <- paste("hit_setting_id=", task_setting_id, '&email=', email, '&auth_token=', auth_token, sep="")
myget <- POST(paste('https://www.sentimentit.com/api/batches.json?',
args, sep=''))
batch_ids[i] <- fromJSON(rawToChar(as.raw(myget$content)))$id
}
batch_id <- unique(batch_id)
batch_id <- batch_id[sort.list(batch_id)]
for(i in batch_id){
myput<-PUT('https://www.sentimentit.com/api/batches/',i,'/repost_expired.json',
body = args, content_type_json(),
encode='json')
}
i
myput<-PUT('https://www.sentimentit.com/api/batches/',i,'/repost_expired.json',
body = args, #content_type_json(),
encode='json')
?is.request
?request
for(i in batch_id){
myput<-PUT('https://www.sentimentit.com/api/batches/',i,'/repost_expired',
body = args, #content_type_json(),
encode='json')
}
arfs
args
i <- 369
myput<-PUT('https://www.sentimentit.com/api/batches/',i,'/repost_expired',
body = args, #content_type_json(),
encode='json')
myput<-PUT('https://www.sentimentit.com/api/batches/',i,'/repost_expired.json',
body = args, #content_type_json(),
encode='json')
myput<-PUT(paste0('https://www.sentimentit.com/api/batches/',i,'/repost_expired'),
body = args, #content_type_json(),
encode='json')
myput
fromJSON(rawToChar(as.raw(t$content)))
fromJSON(rawToChar(as.raw(myput$content)))
fromJSON(rawToChar(as.raw(myput)))
rawToChar(as.raw(myput$content))
rawToChar(as.raw(myput$statud))
rawToChar(as.raw(myput$status))
(myput$status)
myput<-PUT(paste0('https://www.sentimentit.com/api/batches/',i,'/repost_expired.json'),
body = args, #content_type_json(),
encode='json')
myput
myput<-PUT(paste0('https://www.sentimentit.com/api/batches/',i,'/repost_expired.json'),
body = args, content_type_json(),
encode='json')
myput
myput<-PUT(paste0('https://www.sentimentit.com/api/batches/',i,'/repost_expired'),
body = args, content_type_json(),
encode='json')
myput
args
batch_id
batch_id <- 238
auth_token <- authenticate(email, password)
# Put the batch_id in numerical order and remove duplicates
batch_id <- unique(batch_id)
batch_id <- batch_id[sort.list(batch_id)]
output<-data.frame()
for(i in batch_id){
myurl<- GET(paste0('https://www.sentimentit.com/api/batches/',i,'/download.json?email=', email, '&auth_token=', auth_token))
myurl <- rawToChar(as.raw(myurl$content))
myurl <- strsplit(myurl,'\"')[[1]][4]
x <- getURL(myurl)
# attempt to connect to server until data is downloaded
try_count <- 0
while(nchar(x) < 1000 & try_count < 50){
Sys.sleep(20)
x <- getURL(myurl)
try_count = try_count + 1
}
if(nchar(x) < 1000 & try_count == 50){
message <- paste("Failed to download batch", i,
"try again later and check that the batch number exists.")
warning(message)
}else{
hold <- as.data.frame(read.csv(text = x), stringsAsFactors = FALSE)
for(k in 1:ncol(hold)){
if(is.factor(hold[,k])) hold[,k] <- as.character(hold[,k])
}
output <- rbind(output,hold)
}
}
x
1/3*50
1/3*20
1/3*10
1/3*15
nchar(x)
library(weightTAPSPACK)
?"weightTAPSPACK"
library('plyr')
library('jsonlite')
library('httr')
library('RCurl')
library('rstan')
?DELETE
email <- 'carlson.david@wustl.edu'
password <- 'SentimentIt'
args <- list(email = email, password = password)
args <- toJSON(args, auto_unbox=TRUE)
auth_token <- authenticate(email, password)
auth_token
authenticate
authenticate <- function(email, password){
args <- list(email = email, password = password)
args <- toJSON(args, auto_unbox=TRUE)
mypost <- POST('https://www.sentimentit.com/api/sessions.json',
body = args, content_type_json(),
encode='json')
out <- fromJSON(rawToChar(as.raw(mypost$content)))
if(!out$success){
email <- readline('Invalid email or password. Re-enter email: ')
password <- readline('Re-enter password: ')
return(authenticate(email, password))
}
return(out$auth_token)
}
authenticate('carlson.david@wustl.edu', 'SentimentIt')
auth_token <- authenticate(email, password)
auth_token
args <- list(email = email, auth_token = auth_token)
args <- toJSON(args, auto_unbox=TRUE)
mydelete <- DELETE('https://www.sentimentit.com/api/sessions/sign_out.json',
body = args, content_type_json(),
encode='json')
fromJSON(rawToChar(as.raw(mydelete$content)))
auth_token
mydelete <- DELETE(paste0('https://www.sentimentit.com/api/sessions/sign_out.json?email=', email, '&auth_token=',
auth_token), content_type_json(),
encode='json')
fromJSON(rawToChar(as.raw(mydelete$content)))
x<-NULL
is.vector(x)
x<-2
is.vector(x)
x<-NULL
length(x)
x<-2
length(x)
x[1]
x[2]
rm(list=ls())
rbind(1:10, 2:11)
cbind(1:10,2:11)
matrix(c(1:10,2:11), ncol = 2)
matrix(c(1:10,2:11), nrow = 10)
matrix(c(1:10,2:11), ncol = 2, nrow = 10)
matrix(c(1:10,2:11), ncol = 2, nrow = 10, byrow = TRUE) #not the same
vap<-voting.age.population<-c(3481823, 496387, 4582842, 2120139,26955438,3617942,2673154,472143,14085749,6915512,995937,1073799,9600372,4732010,2265860,2068253,3213141,3188765,1033632,4242214,4997677,7620982,3908159,2139918,4426278,731365,1321923,1870315,1012033,6598368,1452962,14838076,6752018,494923,8697456,2697855,2850525,9612380,824854,3303593,594599,4636679,17038979,1797941,487900,5841335,4876661,1421717,4257230,392344)
total.votes<-tv<-c(NA, 238307, 1553032, 780409,8899059,1586105, 1162391, 122356,4884544, 2143845,348988, 458927,3586292, 1719351,1071509, 864083,1370062, 954896,NA, 1809237, 2243835,3852008, 2217552,NA, 2178278, 411061,610499, 586274,418550, 2315643,568597, 4703830,2036451, 220479,4184072, NA,1399650, NA,392882, 1117311,341105, 1868363,NA, 582561, 263025,2398589, 2085074,473014, 2183155, 196217)
mat <- cbind(vap,tv)
mat[1, 1] # first row, first colum
mat[1:5, ] # blank means everything.
head(mat) #just the first six rows
tail(head)
tail(head)
head(mat) #just the first six rows
tail(head)
tail(mat)
tail(mat,8)
my_array <- array(1:12, dim = c(3,2,2))
my_array[1 , , ] #only the first row.  Weird stuff happens here.
my_array[ , 1, ] #only the first column.  More weird stuff.
my_array[ , , 1] #only the first table.  This makes sense.
attributes(mat)
dim(mat)
str(mat) #gives you all of this information
dim(mat) #first row, then column.
dimnames(mat)
dimnames(mat)[[1]]
dimnames(mat)
dimnames(mat)[[1]]
dimnames(mat)[[2]]
dimnames(mat)[[2]][1]
dimnames(mat)[[2]][1] <- "VotingAgePop"
rownames(mat) #this is null, because there are no names
colnames(mat) # VotingAgePop, tv
pi
my_array
my_list <- list("Dave", pi, my_array, TRUE, getwd())
my_list #fewer rules than for vectors.
dimnames(mat)
my_list
my_list[[1]]
my_list[[3]]
my_list[1]
my_list[3]
attributes(my_list) # list has attributes, but we haven't set them
length(my_list) # this reports the number of major sub-elements in the list
dim(my_list) # this won't work for complicated lists
names(my_list)
names(my_list)<-c("one", "two", "three", "four", "five")
my_list
my_list[[3]]
my_list$three
str(my_list) # now each part of the list has a name attribute
my_list
my_other_list <- list(person = "Dalston", months = month.name, stuff = my_list, voting = mat)
str(my_other_list) #lets talk about what's going on here.
my_other_list$person
my_other_list$months[1]
my_other_list$stuff[[1]]
my_other_list$voting
my_other_list$stuff$one
my_other_list$advisor
my_other_list$advisor <- "Jeff"
my_other_list
data.frame(vap, tv)
turnout<-tv/vap
my_df <- data.frame(vap, tv, turnout, state.abb, stringsAsFactors = FALSE) #can include character, numeric, and logical.
race <- c('black','white','other')
race
class(race)
as.factor(race)
as.numeric(as.factor(race))
my_df2 <- data.frame(vap, tv, turnout, state.abb) #can include character, numeric, and logical.
head(my_df2)
my_df2$state.abb
my_df2$state.abb[2]<-'DC'
my_df
my_df$state.abb #you can use dollar signs.
my_df[[4]] #Or double brackets.
my_df[4] # or single brackets without commas (to choose columns)
my_df[,4] # or single brackets with comma, like a matrix
my_df[4,] # or single brackets with comma, like a matrix
length(my_df) #this is ncol
ncol(my_df)
nrow(my_df)
dim(my_df)
dim(my_df)[1]
dim(my_df)[2]
names(my_df)
str(my_df)
mean(my_df$turnout)
my_df$turnout
mean(my_df$turnout)
mean(my_df$turnout, na.rm = TRUE)
with(my_df, mean(turnout, na.rm = TRUE))
?with
with(my_df, mean(tv/vap, na.rm = TRUE))
c(1,1)+c(0,1)
getwd() # where are we?
setwd("~/Fall2016RSessions/")
list.files() # list files
list.dirs() # list folders
dir.create("New Folder") #make a new folder
dir.exists("New Folder") #see if a folder exists
file.exists("anes codebook.pdf") #see if a file exists
file.exists("Session3/anes codebook.pdf")
file.path("Users", "clockbob1", "Dropbox", "R training", "Session 3", "New Folder", "dataStuff.csv") # easy way to construct a file path.
paste()
paste("text 1", "text 2", sep = " * ")
anes <- read.csv("Session3/anes2008.csv", stringsAsFactors = FALSE)
setwd('Session3')
list.files()[1]
anes <- read.csv(list.files()[1], stringsAsFactors = FALSE) #can all use subsetting, becuase everything in R is an object
write.csv(my_df, "Turnout.csv")
library(foreign)
write.dta(my_df, "Turnout.dta")
if(TRUE){
print("Great")
}
if(FALSE){
print("Not so great")
}
if(1) "Numbers work too"
if(0) "Not this one though"
if(2) "Numbers work too"
if(-2) "Numbers work too"
x <- 4
x < 3
if( x < 3){
print("x is less than 3")
} else {
print("x is not less than 3")
}
x
x < 3
if( x > 3){
print("x is less than 3")
} else {
print("x is not less than 3")
}
if(x > 4){
print("bigger than four")
} else if( x < 4 ){
print("x smaller than four")
} else {
print("x is four")
}
y<-4
if(x==4){
if(y>3){
print('yay')
}
}
turnout
if( turnout > .5 ){
print("lots of people vote")
}
ifelse(turnout > .5, "lots of voters", "few voters")
ifelse(x==4,'yes','no')
cbind(ifelse(turnout > .5, "lots of voters", "few voters"),turnout)
ifelse(x>4,'greater',ifelse(x<4,'less','equal'))
'"'
"Bruce's"
ifelse(turnout > .5, my_df$state.abb, "few voters")
ifelse(turnout > .5, my_df$state.abb[1:10], "few voters")
cbind(my_df$state.abb,ifelse(turnout > .5, my_df$state.abb[1:10], "few voters"))
cbind(my_df$state.abb,ifelse(turnout > .5, my_df$state.abb, "few voters"))
cbind(my_df$state.abb,ifelse(turnout > .5, my_df$state.abb, "few voters"),turnout)
ifelse(turnout > .5, my_df$state.abb[1:3], "few voters")
plot(NULL, xlim=c(0, 100), ylim=c(0, 1)) # make a blank plot with the limits set by those vectors
x = 1
x = 1
repeat {
y = 1 / x
x = x + 1
points(x, y)
if (x == 100) {
break
}
}
x = 0
repeat {
x = x + 1
y = 1 / x
points(x, y)
if (x == 100) {
break
}
}
plot(NULL, xlim=c(0, 100), ylim=c(0, 1))
x = 0
while(x < 100) {
y = 1 / x
x = x + 1
points(x, y)
}
while(TRUE) {
y = 1 / x
x = x + 1
points(x, y)
}
Fib1 = 1
Fib2 = 1
Fibonacci = c(0, Fib2)
while(Fib2 <= 300) {
Fibonacci = c(Fibonacci, Fib2)
oldFib2 = Fib2
Fib2 = Fib1 + Fib2
Fib1 = oldFib2
}
Fibonacci
Fib1 = 1
Fib2 = 1
Fibonacci = c(0, Fib2)
Fibonacci
Fib1
Fib2
Fibonacci = c(Fibonacci, Fib2)
Fibonacci
oldFib2 = Fib2
Fib2 = Fib1 + Fib2
Fib1 = oldFib2
Fib1
Fib2
Fibonacci = c(Fibonacci, Fib2)
oldFib2 = Fib2
Fib2 = Fib1 + Fib2
Fib1 = oldFib2
Fibonacci
Fib2
Fib1
x<-1:5
x*7
for (monkey in c("Spider", "Howler", "Jacob")) {
# Each loop does the equivalent of: monkey = "Spider" or monkey = "Howler"
print(paste(monkey,'monkey'))
}
for (i in 1:20){
print(i)
}
for (i in 1:20){
print(i*i)
}
plot(NULL, xlim=c(0, 100), ylim=c(0, 1))
for (i in 0:100) {
points(i, 1 / i)
}
1/0
-1/0
some.odds = NULL
for (i in 1:200) {
if (i %% 2 == 0) {
next
}
some.odds = c(some.odds, i)
}
some.odds
0/0
NA
NULL
class(0/0)
class(NA)
class(NULL)
i %% 2
head(ANES)
head(anes)
summary(anes)
unique(anes$race)
for(i in unique(anes$race)){
print(i)
}
i
anes$race==i
anes[anes$race==i,]
head(anes[anes$race==i,])
i<-1
head(anes[anes$race==i,])
unique(anes$race)
paste('dfg', 'drg')
paste('dfg', 'drg',sep='')
paste0('sdf','sdf')
for(i in unique(anes$race)){
hold <- anes[anes$race==i,]
write.csv(hold, paste0('anes',i,'.csv'))
}
for (i in 1:200) {
if ((i-1) %% 3 == 0) {
next
}
i
}
for (i in 1:100) {
if ((i-1) %% 3 == 0) {
next
}
print(i)
}
for (i in 1:100) {
if ((i-1) %% 3 != 0) {
next
}
print(i)
}
for (i in 1:100) {
if (i %% 3 != 0) {
next
}
print(i)
}
3 == 0
3 != 0
sample(c('H','T'),3)
sample(c('H','T'),3,replace=TRUE)
sample(c('H','T'),1)
sample(c('H','T'),1)
sample(c('H','T'),1)
sample(c('H','T'),1)
sample(c('H','T'),1)
sample(c('H','T'),1)
sample(c('H','T'),1)
sample(c('H','T'),1)
flips <- sample(c('H','T'),3,replace=TRUE)
while(flips[1]!=flips[2] & flips[2]!=flips[3]){
flips <- c(sample(c('H','T'),1),flips)
}
flips
flips <- sample(c('H','T'),3,replace=TRUE)
while(flips[1]!=flips[2] | flips[2]!=flips[3]){
flips <- c(sample(c('H','T'),1),flips)
}
flips
flips <- sample(c('H','T'),3,replace=TRUE)
while(flips[1]!=flips[2] | flips[2]!=flips[3]){
flips <- c(sample(c('H','T'),1),flips)
}
flips
flips <- sample(c('H','T'),3,replace=TRUE)
while(flips[1]!=flips[2] | flips[2]!=flips[3]){
flips <- c(sample(c('H','T'),1),flips)
print(flips)
}
flips <- sample(c('H','T'),3,replace=TRUE)
while(flips[1]!=flips[2] | flips[2]!=flips[3]){
flips <- c(sample(c('H','T'),1),flips)
print(flips)
}
flips <- sample(c('H','T'),3,replace=TRUE)
while(flips[1]!=flips[2] | flips[2]!=flips[3]){
flips <- c(sample(c('H','T'),1),flips)
print(flips)
}
flips <- sample(c('H','T'),3,replace=TRUE)
while(flips[1]!=flips[2] | flips[2]!=flips[3]){
flips <- c(sample(c('H','T'),1),flips)
print(flips)
}
flips
flips <- sample(c('H','T'),3,replace=TRUE)
while(flips[1]!=flips[2] | flips[2]!=flips[3]){
flips <- c(sample(c('H','T'),1),flips)
print(flips)
}
